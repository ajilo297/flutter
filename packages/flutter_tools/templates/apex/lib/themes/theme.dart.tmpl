import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'colors.dart';
import 'typography.dart';

export 'colors.dart';
export 'typography.dart';

const double kPadding = 8;

// ignore: avoid_classes_with_only_static_members
class AppTheme {
  static const _light = AppColors.light;
  static const _dark = AppColors.dark;

  static final _smallTextTheme = AppTextStyle.smallTextTheme;
  static final _mediumTextTheme = AppTextStyle.mediumTextTheme;
  static final _textTheme = AppTextStyle.textTheme;

  static ThemeData get lightSmall => _getTheme(_light, _smallTextTheme);
  static ThemeData get lightMedium => _getTheme(_light, _mediumTextTheme);
  static ThemeData get lightStandard => _getTheme(_light, _textTheme);
  static ThemeData get darkSmall => _getTheme(_dark, _smallTextTheme);
  static ThemeData get darkMedium => _getTheme(_dark, _mediumTextTheme);
  static ThemeData get darkStandard => _getTheme(_dark, _textTheme);

  static ThemeData _getTheme(ColorScheme colorScheme, TextTheme textTheme) {
    final dividerColor = colorScheme.onSurface.withOpacity(0.08);
    final border = OutlineInputBorder(
      borderRadius: BorderRadius.circular(6),
      borderSide: BorderSide(
        color: dividerColor,
      ),
    );
    return _theme.copyWith(
      appBarTheme: AppBarTheme(
        centerTitle: true,
        color: colorScheme.surface,
        foregroundColor: colorScheme.onSurface,
        shadowColor: colorScheme.onSurface.withOpacity(0.08),
        iconTheme: IconThemeData(color: colorScheme.onSurface),
        actionsIconTheme: IconThemeData(
          color: colorScheme.onSurface,
          size: 24,
        ),
      ),
      cardTheme: CardTheme(
        shadowColor: colorScheme.onSurface.withOpacity(0.04),
        margin: const EdgeInsets.symmetric(
          horizontal: kPadding * 3,
          vertical: kPadding * 3 / 2,
        ),
        elevation: 3,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
      colorScheme: colorScheme,
      splashColor: colorScheme.onSurface.withOpacity(0.1),
      textTheme: textTheme
          .apply(
            displayColor: colorScheme.onSurface,
            bodyColor: colorScheme.onSurface,
          )
          .copyWith(
            headline6: textTheme.bodyText1!.copyWith(
              color: colorScheme.onSurface.withOpacity(0.4),
            ),
            caption: textTheme.caption!.copyWith(
              color: colorScheme.onSurface.withOpacity(0.4),
            ),
          ),
      accentTextTheme: textTheme.apply(
        bodyColor: colorScheme.onSecondary,
        displayColor: colorScheme.onSecondary,
      ),
      primaryTextTheme: _textTheme.apply(
        bodyColor: colorScheme.onSurface,
        displayColor: colorScheme.onSurface,
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          primary: colorScheme.onSurface,
          padding: _buttonPadding,
        ),
      ),
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          primary: colorScheme.onSurface,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(10)),
          ),
          padding: _buttonPadding,
        ),
      ),
      hintColor: colorScheme.onBackground,
      backgroundColor: colorScheme.background,
      scaffoldBackgroundColor: colorScheme.background,
      canvasColor: colorScheme.background,
      cardColor: colorScheme.surface,
      brightness: colorScheme.brightness,
      iconTheme: IconThemeData(
        color: colorScheme.onBackground,
      ),
      bottomSheetTheme: BottomSheetThemeData(
        backgroundColor: colorScheme.surface,
        modalBackgroundColor: colorScheme.surface,
      ),
      dialogTheme: DialogTheme(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        backgroundColor: colorScheme.surface,
        titleTextStyle: textTheme
            .apply(
              displayColor: colorScheme.onSurface,
            )
            .headline3,
        contentTextStyle: textTheme
            .apply(
              bodyColor: colorScheme.onSurface,
            )
            .bodyText2,
      ),
      snackBarTheme: _snackBarThemeData.copyWith(
        backgroundColor: colorScheme.secondary,
        behavior: SnackBarBehavior.floating,
        actionTextColor: colorScheme.primary,
        contentTextStyle: textTheme
            .apply(
              bodyColor: AppColors.onPrimaryDark,
            )
            .bodyText2,
      ),
      dividerTheme: DividerThemeData(color: dividerColor),
      inputDecorationTheme: InputDecorationTheme(
        enabledBorder: border,
        border: border,
        hintStyle: textTheme
            .apply(
              displayColor: colorScheme.onSurface.withOpacity(0.4),
              bodyColor: colorScheme.onSurface.withOpacity(0.4),
            )
            .copyWith(
              headline6: textTheme.bodyText1!.copyWith(
                color: colorScheme.onSurface.withOpacity(0.4),
              ),
            )
            .headline6,
        focusedBorder: border.copyWith(
          borderSide: BorderSide(
            color: colorScheme.primary,
          ),
        ),
        labelStyle: textTheme
            .apply(
              displayColor: colorScheme.onSurface,
              bodyColor: colorScheme.onSurface,
            )
            .copyWith(
              headline6: textTheme.bodyText1!.copyWith(
                color: colorScheme.onSurface.withOpacity(0.4),
              ),
            )
            .headline6,
        floatingLabelBehavior: FloatingLabelBehavior.never,
      ),
    );
  }

  static final ThemeData _theme = ThemeData(
    elevatedButtonTheme: _elevatedButtonTheme,
    buttonBarTheme: _buttonBarThemeData,
    bottomSheetTheme: _bottomSheetTheme,
  );

  static final ButtonBarThemeData _buttonBarThemeData = ButtonBarThemeData(
    alignment: MainAxisAlignment.center,
    mainAxisSize: MainAxisSize.max,
    buttonPadding: _buttonPadding,
    layoutBehavior: ButtonBarLayoutBehavior.padded,
  );

  static const SnackBarThemeData _snackBarThemeData = SnackBarThemeData(
    behavior: SnackBarBehavior.floating,
  );

  static final ElevatedButtonThemeData _elevatedButtonTheme =
      ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      elevation: 0,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.all(Radius.circular(10)),
      ),
      padding: _buttonPadding,
    ),
  );

  static const BottomSheetThemeData _bottomSheetTheme = BottomSheetThemeData(
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
    ),
  );

  static EdgeInsets get _buttonPadding => const EdgeInsets.symmetric(
        vertical: kPadding * 4 / 2,
        horizontal: kPadding * 2,
      );
}

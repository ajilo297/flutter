import 'dart:async';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

import '../constants.dart';
import '../data/api_repository.dart';
import '../data/app_repository.dart';
import '../utils/unawaited.dart';

class AuthCubit extends Cubit<bool?> {
  // TODO: Uncomment after setting up Openapi
  // AuthApi get _api => APIRepository.instance.auth;

  static AuthCubit get instance => _instance;

  factory AuthCubit() => _instance;
  static final AuthCubit _instance = AuthCubit._internal();

  AuthCubit._internal() : super(false); // TODO: Ensure proper initialization

  Future<void> autoLogin({
    int retries = 5,
    Duration delay = const Duration(seconds: 5),
  }) async {
    var accessToken = AppRepository.instance.accessToken;
    emit(null);
    if (accessToken != null && !(state ?? false)) {
      try {
        // TODO: Uncomment after configuring Openapi
        // accessToken = (await _api.authTokenRefreshCreate(
        //         data: TokenRefreshSliding((b) => b..token = accessToken!)))
        //     .data
        //     ?.token;
        // if (accessToken != null) {
        //   login((await _api.authUserRead()).data, accessToken);
        // }
        // return;
        emit(true);
      } on DioError catch (e) {
        final statusCode = e.response?.statusCode ?? -1;
        if (statusCode > 400 && statusCode < 500) {
          logout();
        } else {
          if (retries > 0) {
            unawaited(
              Future.delayed(delay).then(
                (_) async => autoLogin(retries: retries - 1),
              ),
            );
          }
          emit(false);
          rethrow;
        }
      }
    } else {
      logout();
    }
    // TODO: Uncomment after configuring Openapi
    emit(false);
  }

  // TODO: Uncomment after configuring Openapi
  Future login(/*User? user,*/ String token) async {
    emit(true);
    // if (user != null) {
    //   AppRepository.instance
    //     ..accessToken = token
    //     ..analytics.setUserId(user.id.toString())
    //     ..analytics.logLogin();
    //   Sentry.configureScope(
    //     (scope) => scope.user = SentryUser(
    //       id: user.id.toString(),
    //       email: user.email,
    //       username: '${user.company}/${user.username}',
    //     ),
    //   );
    //   emit(user);
    //   unawaited(initMessaging());
    // } else {
    //   logout();
    // }
  }

  Future loginEmail({required String email, required String password}) async {
    // TODO: Handle Auth with email and password
    login('');
  }

  void logout() {
    AppRepository.instance
      ..accessToken = null
      ..analytics.logEvent(name: 'logout');
    emit(false);
  }
}

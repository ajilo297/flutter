import 'dart:async';

import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

import 'app.dart';
import 'constants.dart';
import 'data/app_repository.dart';
import 'utils/app_snackbar.dart';

Future<void> main() async {
  await runZonedGuarded(() async {
    WidgetsFlutterBinding.ensureInitialized();
    await Firebase.initializeApp();

    if(!kDebugMode) {
      await SentryFlutter.init(
            (options) {
          options.dsn = kSentryDSN;
        },
      );
    }

    FlutterError.onError = (details, {bool forceReport = false}) {
      debugPrint('>>> ${details.exception}, ${details.stack}');
      AppSnackbar.showException(details.exception);
      if (!kDebugMode) {
        Sentry.captureException(details.exception, stackTrace: details.stack);
      }
    };

    if (!kDebugMode) {
      ErrorWidget.builder = (FlutterErrorDetails error) {
        Zone.current.handleUncaughtError(error.exception, error.stack!);
        return const Offstage();
      };
    }
    await AppRepository.instance.init();
    runApp({{projectNamePascalCase}}App());
  }, (exception, stackTrace) async {
    debugPrint('>>> $exception, $stackTrace');

    AppSnackbar.showException(exception);
    if (!kDebugMode) {
      await Sentry.captureException(exception, stackTrace: stackTrace);
    }
  });
}
